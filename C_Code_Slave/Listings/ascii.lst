C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ASCII
OBJECT MODULE PLACED IN .\Objects\ascii.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\ascii.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND CODE LISTINCLUDE 
                    -SYMBOLS PRINT(.\Listings\ascii.lst) TABS(2) PREPRINT(.\Listings\ascii.i) OBJECT(.\Objects\ascii.obj)

line level    source

   1          
   2          #include "stdint.h"
   1      =1  /*-------------------------------------------------------------------------
   2      =1     stdint.h - ISO C99 7.18 Integer types <stdint.h>
   3      =1  
   4      =1     Copyright (C) 2005, Maarten Brock, sourceforge.brock@dse.nl
   5      =1     Copyright (C) 2011, Philipp Klaus Krause, pkk@spth.de
   6      =1  
   7      =1     This library is free software; you can redistribute it and/or modify it
   8      =1     under the terms of the GNU General Public License as published by the
   9      =1     Free Software Foundation; either version 2, or (at your option) any
  10      =1     later version.
  11      =1  
  12      =1     This library is distributed in the hope that it will be useful,
  13      =1     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14      =1     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  15      =1     GNU General Public License for more details.
  16      =1  
  17      =1     You should have received a copy of the GNU General Public License 
  18      =1     along with this library; see the file COPYING. If not, write to the
  19      =1     Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
  20      =1     MA 02110-1301, USA.
  21      =1  
  22      =1     As a special exception, if you link this library with other files,
  23      =1     some of which are compiled with SDCC, to produce an executable,
  24      =1     this library does not by itself cause the resulting executable to
  25      =1     be covered by the GNU General Public License. This exception does
  26      =1     not however invalidate any other reasons why the executable file
  27      =1     might be covered by the GNU General Public License.
  28      =1  -------------------------------------------------------------------------*/
  29      =1  
  30      =1  #ifndef _STDINT_H
  31      =1  #define _STDINT_H       1
  32      =1  
  33      =1  /* Exact integral types.  */
  34      =1  
  35      =1  #if !defined(__SDCC_pic14) && !defined(__SDCC_pic16)
  36      =1  #if __STDC_VERSION__ >= 199901L
*** WARNING C322 IN LINE 36 OF ..\stdint.h: unknown identifier
           =1 #define __SDCC_LONGLONG
           =1 #endif
  39      =1  #endif
  40      =1  
  41      =1  /* Signed.  */
  42      =1  
  43      =1  typedef signed char             int8_t;
  44      =1  typedef short int               int16_t;
  45      =1  typedef long int                int32_t;
  46      =1  #ifdef __SDCC_LONGLONG
           =1 typedef long long int           int64_t;
           =1 #endif
  49      =1  
  50      =1  /* Unsigned.  */
  51      =1  typedef unsigned char           uint8_t;
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 2   

  52      =1  typedef unsigned short int      uint16_t;
  53      =1  typedef unsigned long int       uint32_t;
  54      =1  #ifdef __SDCC_LONGLONG
           =1 typedef unsigned long long int  uint64_t;
           =1 #endif
  57      =1  
  58      =1  /* Small types.  */
  59      =1  
  60      =1  /* Signed.  */
  61      =1  typedef signed char             int_least8_t;
  62      =1  typedef short int               int_least16_t;
  63      =1  typedef long int                int_least32_t;
  64      =1  #ifdef __SDCC_LONGLONG
           =1 typedef long long int           int_least64_t;
           =1 #endif
  67      =1  
  68      =1  /* Unsigned.  */
  69      =1  typedef unsigned char           uint_least8_t;
  70      =1  typedef unsigned short int      uint_least16_t;
  71      =1  typedef unsigned long int       uint_least32_t;
  72      =1  #ifdef __SDCC_LONGLONG
           =1 typedef unsigned long long int  uint_least64_t;
           =1 #endif
  75      =1  
  76      =1  /* Fast types.  */
  77      =1  
  78      =1  /* Signed.  */
  79      =1  typedef signed char             int_fast8_t;
  80      =1  typedef int                     int_fast16_t;
  81      =1  typedef long int                int_fast32_t;
  82      =1  #ifdef __SDCC_LONGLONG
           =1 typedef long long int           int_fast64_t;
           =1 #endif
  85      =1  
  86      =1  /* Unsigned.  */
  87      =1  typedef unsigned char           uint_fast8_t;
  88      =1  typedef unsigned int            uint_fast16_t;
  89      =1  typedef unsigned long int       uint_fast32_t;
  90      =1  #ifdef __SDCC_LONGLONG
           =1 typedef unsigned long long int  uint_fast64_t;
           =1 #endif
  93      =1  
  94      =1  /* Types for `void *' pointers.  */
  95      =1  #if defined (__SDCC_mcs51) || defined (__SDCC_ds390)
           =1   typedef long int              intptr_t;
           =1   typedef unsigned long int     uintptr_t;
           =1 #else
  99      =1    typedef int                   intptr_t;
 100      =1    typedef unsigned int          uintptr_t;
 101      =1  #endif
 102      =1  
 103      =1  
 104      =1  /* Largest integral types.  */
 105      =1  #ifndef __SDCC_LONGLONG
 106      =1  typedef long int                intmax_t;
 107      =1  typedef unsigned long int       uintmax_t;
 108      =1  #else
           =1 typedef long long int           intmax_t;
           =1 typedef unsigned long long int  uintmax_t;
           =1 #endif
 112      =1  
 113      =1  /* Limits of integral types.  */
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 3   

 114      =1  
 115      =1  /* Minimum of signed integral types.  */
 116      =1  #define INT8_MIN               (-128)
 117      =1  #define INT16_MIN              (-32767-1)
 118      =1  #define INT32_MIN              (-2147483647L-1)
 119      =1  #ifdef __SDCC_LONGLONG
           =1 #define INT64_MIN              (-9223372036854775807LL-1)
           =1 #endif
 122      =1  
 123      =1  /* Maximum of signed integral types.  */
 124      =1  #define INT8_MAX               (127)
 125      =1  #define INT16_MAX              (32767)
 126      =1  #define INT32_MAX              (2147483647L)
 127      =1  #ifdef __SDCC_LONGLONG
           =1 #define INT64_MAX              (9223372036854775807LL)
           =1 #endif
 130      =1  
 131      =1  /* Maximum of unsigned integral types.  */
 132      =1  #define UINT8_MAX              (255)
 133      =1  #define UINT16_MAX             (65535)
 134      =1  #define UINT32_MAX             (4294967295UL)
 135      =1  #ifdef __SDCC_LONGLONG
           =1 #define UINT64_MAX             (18446744073709551615ULL)
           =1 #endif
 138      =1  
 139      =1  /* Minimum of signed integral types having a minimum size.  */
 140      =1  #define INT_LEAST8_MIN         INT8_MIN
 141      =1  #define INT_LEAST16_MIN        INT16_MIN
 142      =1  #define INT_LEAST32_MIN        INT32_MIN
 143      =1  #ifdef __SDCC_LONGLONG
           =1 #define INT_LEAST64_MIN        INT64_MIN
           =1 #endif
 146      =1  
 147      =1  /* Maximum of signed integral types having a minimum size.  */
 148      =1  #define INT_LEAST8_MAX         INT8_MAX
 149      =1  #define INT_LEAST16_MAX        INT16_MAX
 150      =1  #define INT_LEAST32_MAX        INT32_MAX
 151      =1  #ifdef __SDCC_LONGLONG
           =1 #define INT_LEAST64_MAX        INT64_MAX
           =1 #endif
 154      =1  
 155      =1  /* Maximum of unsigned integral types having a minimum size.  */
 156      =1  #define UINT_LEAST8_MAX        UINT8_MAX
 157      =1  #define UINT_LEAST16_MAX       UINT16_MAX
 158      =1  #define UINT_LEAST32_MAX       UINT32_MAX
 159      =1  #ifdef __SDCC_LONGLONG
           =1 #define UINT_LEAST64_MAX       UINT64_MAX
           =1 #endif
 162      =1  
 163      =1  /* Minimum of fast signed integral types having a minimum size.  */
 164      =1  #define INT_FAST8_MIN          INT8_MIN
 165      =1  #define INT_FAST16_MIN         INT16_MIN
 166      =1  #define INT_FAST32_MIN         INT32_MIN
 167      =1  #ifdef __SDCC_LONGLONG
           =1 #define INT_FAST64_MIN         INT64_MIN
           =1 #endif
 170      =1  
 171      =1  /* Maximum of fast signed integral types having a minimum size.  */
 172      =1  #define INT_FAST8_MAX          INT8_MAX
 173      =1  #define INT_FAST16_MAX         INT16_MAX
 174      =1  #define INT_FAST32_MAX         INT32_MAX
 175      =1  #ifdef __SDCC_LONGLONG
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 4   

           =1 #define INT_FAST64_MAX         INT64_MAX
           =1 #endif
 178      =1  
 179      =1  /* Maximum of fast unsigned integral types having a minimum size.  */
 180      =1  #define UINT_FAST8_MAX         UINT8_MAX
 181      =1  #define UINT_FAST16_MAX        UINT16_MAX
 182      =1  #define UINT_FAST32_MAX        UINT32_MAX
 183      =1  #ifdef __SDCC_LONGLONG
           =1 #define UINT_FAST64_MAX        UINT64_MAX
           =1 #endif
 186      =1  
 187      =1  /* Values to test for integral types holding `void *' pointer.  */
 188      =1  #if defined (__SDCC_mcs51) || defined (__SDCC_ds390)
           =1 #define INTPTR_MIN             (-2147483647L-1)
           =1 #define INTPTR_MAX             (2147483647L)
           =1 #define UINTPTR_MAX            (4294967295UL)
           =1 #else
 193      =1  #define INTPTR_MIN             (-32767-1)
 194      =1  #define INTPTR_MAX             (32767)
 195      =1  #define UINTPTR_MAX            (65535)
 196      =1  #endif
 197      =1  
 198      =1  /* Minimum for largest signed integral type.  */
 199      =1  #ifndef __SDCC_LONGLONG
 200      =1  #define INTMAX_MIN             (-2147483647L-1)
 201      =1  #else
           =1 #define INTMAX_MIN             (-9223372036854775807LL-1)
           =1 #endif
 204      =1  
 205      =1  /* Maximum for largest signed integral type.  */
 206      =1  #ifndef __SDCC_LONGLONG
 207      =1  #define INTMAX_MAX             (2147483647L)
 208      =1  #else
           =1 #define INTMAX_MAX             (9223372036854775807LL)
           =1 #endif
 211      =1  
 212      =1  /* Maximum for largest unsigned integral type.  */
 213      =1  #ifndef __SDCC_LONGLONG
 214      =1  #define UINTMAX_MAX            (4294967295UL)
 215      =1  #else
           =1 #define UINTMAX_MAX            (18446744073709551615ULL)
           =1 #endif
 218      =1  
 219      =1  /* Limits of other integer types.  */
 220      =1  
 221      =1  /* Limits of `ptrdiff_t' type.  */
 222      =1  #if defined (__SDCC_mcs51) || defined (__SDCC_ds390)
           =1 #define PTRDIFF_MIN           (-2147483647L-1)
           =1 #define PTRDIFF_MAX           (2147483647L)
           =1 #else
 226      =1  #define PTRDIFF_MIN           (-32767-1)
 227      =1  #define PTRDIFF_MAX           (32767)
 228      =1  #endif
 229      =1  
 230      =1  /* */
 231      =1  #define SIG_ATOMIC_MIN        (0)
 232      =1  #define SIG_ATOMIC_MAX        (255)
 233      =1  
 234      =1  /* Limit of `size_t' type.  */
 235      =1  #define SIZE_MAX               (65535u)
 236      =1  
 237      =1  /* Signed.  */
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 5   

 238      =1  #define INT8_C(c)      c
 239      =1  #define INT16_C(c)     c
 240      =1  #define INT32_C(c)     c ## L
 241      =1  #ifdef __SDCC_LONGLONG
           =1 #define INT64_C(c)     c ## LL
           =1 #endif
 244      =1  
 245      =1  /* Unsigned.  */
 246      =1  #define UINT8_C(c)     c ## U
 247      =1  #define UINT16_C(c)    c ## U
 248      =1  #define UINT32_C(c)    c ## UL
 249      =1  #ifdef __SDCC_LONGLONG
           =1 #define UINT64_C(c)    c ## ULL
           =1 #endif
 252      =1  
 253      =1  #define WCHAR_MIN      0
 254      =1  #define WCHAR_MAX      0xffffffff
 255      =1  
 256      =1  #define WINT_MIN       0
 257      =1  #define WINT_MAX       0xffffffff
 258      =1  
 259      =1  /* Maximal type.  */
 260      =1  #ifdef __SDCC_LONGLONG
           =1 #define INTMAX_C(c)    c ## LL
           =1 #define UINTMAX_C(c)   c ## ULL
           =1 #else
 264      =1  #define INTMAX_C(c)    c ## L
 265      =1  #define UINTMAX_C(c)   c ## UL
 266      =1  #endif
 267      =1  
 268      =1  /* Bounds-checking interfaces from annex K of the C11 standard. */
 269      =1  #if defined (__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__
           =1 #define RSIZE_MAX SIZE_MAX
           =1 #endif
 272      =1  
 273      =1  #endif /* stdint.h */
 274      =1  
   3          
   4          #include "ascii.h"
   1      =1  
   2      =1  #ifndef __ASCII_H__
   3      =1  #define __ASCII_H__
   4      =1  
   5      =1  
   6      =1  #include "stdint.h"
   1      =2  /*-------------------------------------------------------------------------
   2      =2     stdint.h - ISO C99 7.18 Integer types <stdint.h>
   3      =2  
   4      =2     Copyright (C) 2005, Maarten Brock, sourceforge.brock@dse.nl
   5      =2     Copyright (C) 2011, Philipp Klaus Krause, pkk@spth.de
   6      =2  
   7      =2     This library is free software; you can redistribute it and/or modify it
   8      =2     under the terms of the GNU General Public License as published by the
   9      =2     Free Software Foundation; either version 2, or (at your option) any
  10      =2     later version.
  11      =2  
  12      =2     This library is distributed in the hope that it will be useful,
  13      =2     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14      =2     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  15      =2     GNU General Public License for more details.
  16      =2  
  17      =2     You should have received a copy of the GNU General Public License 
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 6   

  18      =2     along with this library; see the file COPYING. If not, write to the
  19      =2     Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston,
  20      =2     MA 02110-1301, USA.
  21      =2  
  22      =2     As a special exception, if you link this library with other files,
  23      =2     some of which are compiled with SDCC, to produce an executable,
  24      =2     this library does not by itself cause the resulting executable to
  25      =2     be covered by the GNU General Public License. This exception does
  26      =2     not however invalidate any other reasons why the executable file
  27      =2     might be covered by the GNU General Public License.
  28      =2  -------------------------------------------------------------------------*/
  29      =2  
  30      =2  #ifndef _STDINT_H
           =2 #define _STDINT_H       1
           =2 
           =2 /* Exact integral types.  */
           =2 
           =2 #if !defined(__SDCC_pic14) && !defined(__SDCC_pic16)
           =2 #if __STDC_VERSION__ >= 199901L
           =2 #define __SDCC_LONGLONG
           =2 #endif
           =2 #endif
           =2 
           =2 /* Signed.  */
           =2 
           =2 typedef signed char             int8_t;
           =2 typedef short int               int16_t;
           =2 typedef long int                int32_t;
           =2 #ifdef __SDCC_LONGLONG
           =2 typedef long long int           int64_t;
           =2 #endif
           =2 
           =2 /* Unsigned.  */
           =2 typedef unsigned char           uint8_t;
           =2 typedef unsigned short int      uint16_t;
           =2 typedef unsigned long int       uint32_t;
           =2 #ifdef __SDCC_LONGLONG
           =2 typedef unsigned long long int  uint64_t;
           =2 #endif
           =2 
           =2 /* Small types.  */
           =2 
           =2 /* Signed.  */
           =2 typedef signed char             int_least8_t;
           =2 typedef short int               int_least16_t;
           =2 typedef long int                int_least32_t;
           =2 #ifdef __SDCC_LONGLONG
           =2 typedef long long int           int_least64_t;
           =2 #endif
           =2 
           =2 /* Unsigned.  */
           =2 typedef unsigned char           uint_least8_t;
           =2 typedef unsigned short int      uint_least16_t;
           =2 typedef unsigned long int       uint_least32_t;
           =2 #ifdef __SDCC_LONGLONG
           =2 typedef unsigned long long int  uint_least64_t;
           =2 #endif
           =2 
           =2 /* Fast types.  */
           =2 
           =2 /* Signed.  */
           =2 typedef signed char             int_fast8_t;
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 7   

           =2 typedef int                     int_fast16_t;
           =2 typedef long int                int_fast32_t;
           =2 #ifdef __SDCC_LONGLONG
           =2 typedef long long int           int_fast64_t;
           =2 #endif
           =2 
           =2 /* Unsigned.  */
           =2 typedef unsigned char           uint_fast8_t;
           =2 typedef unsigned int            uint_fast16_t;
           =2 typedef unsigned long int       uint_fast32_t;
           =2 #ifdef __SDCC_LONGLONG
           =2 typedef unsigned long long int  uint_fast64_t;
           =2 #endif
           =2 
           =2 /* Types for `void *' pointers.  */
           =2 #if defined (__SDCC_mcs51) || defined (__SDCC_ds390)
           =2   typedef long int              intptr_t;
           =2   typedef unsigned long int     uintptr_t;
           =2 #else
           =2   typedef int                   intptr_t;
           =2   typedef unsigned int          uintptr_t;
           =2 #endif
           =2 
           =2 
           =2 /* Largest integral types.  */
           =2 #ifndef __SDCC_LONGLONG
           =2 typedef long int                intmax_t;
           =2 typedef unsigned long int       uintmax_t;
           =2 #else
           =2 typedef long long int           intmax_t;
           =2 typedef unsigned long long int  uintmax_t;
           =2 #endif
           =2 
           =2 /* Limits of integral types.  */
           =2 
           =2 /* Minimum of signed integral types.  */
           =2 #define INT8_MIN               (-128)
           =2 #define INT16_MIN              (-32767-1)
           =2 #define INT32_MIN              (-2147483647L-1)
           =2 #ifdef __SDCC_LONGLONG
           =2 #define INT64_MIN              (-9223372036854775807LL-1)
           =2 #endif
           =2 
           =2 /* Maximum of signed integral types.  */
           =2 #define INT8_MAX               (127)
           =2 #define INT16_MAX              (32767)
           =2 #define INT32_MAX              (2147483647L)
           =2 #ifdef __SDCC_LONGLONG
           =2 #define INT64_MAX              (9223372036854775807LL)
           =2 #endif
           =2 
           =2 /* Maximum of unsigned integral types.  */
           =2 #define UINT8_MAX              (255)
           =2 #define UINT16_MAX             (65535)
           =2 #define UINT32_MAX             (4294967295UL)
           =2 #ifdef __SDCC_LONGLONG
           =2 #define UINT64_MAX             (18446744073709551615ULL)
           =2 #endif
           =2 
           =2 /* Minimum of signed integral types having a minimum size.  */
           =2 #define INT_LEAST8_MIN         INT8_MIN
           =2 #define INT_LEAST16_MIN        INT16_MIN
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 8   

           =2 #define INT_LEAST32_MIN        INT32_MIN
           =2 #ifdef __SDCC_LONGLONG
           =2 #define INT_LEAST64_MIN        INT64_MIN
           =2 #endif
           =2 
           =2 /* Maximum of signed integral types having a minimum size.  */
           =2 #define INT_LEAST8_MAX         INT8_MAX
           =2 #define INT_LEAST16_MAX        INT16_MAX
           =2 #define INT_LEAST32_MAX        INT32_MAX
           =2 #ifdef __SDCC_LONGLONG
           =2 #define INT_LEAST64_MAX        INT64_MAX
           =2 #endif
           =2 
           =2 /* Maximum of unsigned integral types having a minimum size.  */
           =2 #define UINT_LEAST8_MAX        UINT8_MAX
           =2 #define UINT_LEAST16_MAX       UINT16_MAX
           =2 #define UINT_LEAST32_MAX       UINT32_MAX
           =2 #ifdef __SDCC_LONGLONG
           =2 #define UINT_LEAST64_MAX       UINT64_MAX
           =2 #endif
           =2 
           =2 /* Minimum of fast signed integral types having a minimum size.  */
           =2 #define INT_FAST8_MIN          INT8_MIN
           =2 #define INT_FAST16_MIN         INT16_MIN
           =2 #define INT_FAST32_MIN         INT32_MIN
           =2 #ifdef __SDCC_LONGLONG
           =2 #define INT_FAST64_MIN         INT64_MIN
           =2 #endif
           =2 
           =2 /* Maximum of fast signed integral types having a minimum size.  */
           =2 #define INT_FAST8_MAX          INT8_MAX
           =2 #define INT_FAST16_MAX         INT16_MAX
           =2 #define INT_FAST32_MAX         INT32_MAX
           =2 #ifdef __SDCC_LONGLONG
           =2 #define INT_FAST64_MAX         INT64_MAX
           =2 #endif
           =2 
           =2 /* Maximum of fast unsigned integral types having a minimum size.  */
           =2 #define UINT_FAST8_MAX         UINT8_MAX
           =2 #define UINT_FAST16_MAX        UINT16_MAX
           =2 #define UINT_FAST32_MAX        UINT32_MAX
           =2 #ifdef __SDCC_LONGLONG
           =2 #define UINT_FAST64_MAX        UINT64_MAX
           =2 #endif
           =2 
           =2 /* Values to test for integral types holding `void *' pointer.  */
           =2 #if defined (__SDCC_mcs51) || defined (__SDCC_ds390)
           =2 #define INTPTR_MIN             (-2147483647L-1)
           =2 #define INTPTR_MAX             (2147483647L)
           =2 #define UINTPTR_MAX            (4294967295UL)
           =2 #else
           =2 #define INTPTR_MIN             (-32767-1)
           =2 #define INTPTR_MAX             (32767)
           =2 #define UINTPTR_MAX            (65535)
           =2 #endif
           =2 
           =2 /* Minimum for largest signed integral type.  */
           =2 #ifndef __SDCC_LONGLONG
           =2 #define INTMAX_MIN             (-2147483647L-1)
           =2 #else
           =2 #define INTMAX_MIN             (-9223372036854775807LL-1)
           =2 #endif
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 9   

           =2 
           =2 /* Maximum for largest signed integral type.  */
           =2 #ifndef __SDCC_LONGLONG
           =2 #define INTMAX_MAX             (2147483647L)
           =2 #else
           =2 #define INTMAX_MAX             (9223372036854775807LL)
           =2 #endif
           =2 
           =2 /* Maximum for largest unsigned integral type.  */
           =2 #ifndef __SDCC_LONGLONG
           =2 #define UINTMAX_MAX            (4294967295UL)
           =2 #else
           =2 #define UINTMAX_MAX            (18446744073709551615ULL)
           =2 #endif
           =2 
           =2 /* Limits of other integer types.  */
           =2 
           =2 /* Limits of `ptrdiff_t' type.  */
           =2 #if defined (__SDCC_mcs51) || defined (__SDCC_ds390)
           =2 #define PTRDIFF_MIN           (-2147483647L-1)
           =2 #define PTRDIFF_MAX           (2147483647L)
           =2 #else
           =2 #define PTRDIFF_MIN           (-32767-1)
           =2 #define PTRDIFF_MAX           (32767)
           =2 #endif
           =2 
           =2 /* */
           =2 #define SIG_ATOMIC_MIN        (0)
           =2 #define SIG_ATOMIC_MAX        (255)
           =2 
           =2 /* Limit of `size_t' type.  */
           =2 #define SIZE_MAX               (65535u)
           =2 
           =2 /* Signed.  */
           =2 #define INT8_C(c)      c
           =2 #define INT16_C(c)     c
           =2 #define INT32_C(c)     c ## L
           =2 #ifdef __SDCC_LONGLONG
           =2 #define INT64_C(c)     c ## LL
           =2 #endif
           =2 
           =2 /* Unsigned.  */
           =2 #define UINT8_C(c)     c ## U
           =2 #define UINT16_C(c)    c ## U
           =2 #define UINT32_C(c)    c ## UL
           =2 #ifdef __SDCC_LONGLONG
           =2 #define UINT64_C(c)    c ## ULL
           =2 #endif
           =2 
           =2 #define WCHAR_MIN      0
           =2 #define WCHAR_MAX      0xffffffff
           =2 
           =2 #define WINT_MIN       0
           =2 #define WINT_MAX       0xffffffff
           =2 
           =2 /* Maximal type.  */
           =2 #ifdef __SDCC_LONGLONG
           =2 #define INTMAX_C(c)    c ## LL
           =2 #define UINTMAX_C(c)   c ## ULL
           =2 #else
           =2 #define INTMAX_C(c)    c ## L
           =2 #define UINTMAX_C(c)   c ## UL
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 10  

           =2 #endif
           =2 
           =2 /* Bounds-checking interfaces from annex K of the C11 standard. */
           =2 #if defined (__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__
           =2 #define RSIZE_MAX SIZE_MAX
           =2 #endif
           =2 
           =2 #endif /* stdint.h */
 274      =2  
   7      =1  
   8      =1  //typedef unsigned char   uint8;
   9      =1  //typedef unsigned int    uint16;
  10      =1  //typedef unsigned long   uint32;
  11      =1  
  12      =1  /* ascii temp vars */
  13      =1  extern uint8_t ascii[4];
  14      =1  extern uint8_t hexa[4];
  15      =1  
  16      =1  /* functions prototypes */
  17      =1  void ByteToAscii(uint8_t);
  18      =1  uint8_t NibbleToAscii(uint8_t);
  19      =1  uint8_t AsciiToByte(uint8_t, uint8_t);
  20      =1  void TwoByteToAscii(uint16_t);
  21      =1  uint16_t AsciiToTwoByte(void);
  22      =1  
  23      =1  
  24      =1  #endif  //__ASCII_H__
   5          
   6          
   7          uint8_t ascii[4];
   8          uint8_t hexa[4];
   9          
  10          
  11          /* functions code */
  12          void ByteToAscii(uint8_t val)
  13          {
  14   1          uint8_t a = val / 16;
  15   1          uint8_t b = val % 16;   
  16   1          
  17   1          if ( a <= 9 )        
  18   1          {
  19   2              ascii[0] = a + '0';
  20   2          }
  21   1          else
  22   1          {
  23   2              ascii[0]= (a - 10) + 'A';    
  24   2          }
  25   1          
  26   1          if ( b <= 9 )        
  27   1          {
  28   2              ascii[1] = b + '0';
  29   2          }
  30   1          else
  31   1          {
  32   2              ascii[1]= (b - 10) + 'A';    
  33   2          }
  34   1          return ;
  35   1      }
  36          
  37          uint8_t NibbleToAscii(uint8_t val)
  38          {     
  39   1          if ( val <= 9 )        
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 11  

  40   1          {
  41   2              return val + '0';
  42   2          }
  43   1          else
  44   1          {
  45   2              return (val - 10) + 'A';    
  46   2          }        
  47   1      }
  48          
  49          uint8_t AsciiToByte(uint8_t a, uint8_t b)
  50          {
  51   1          if ( a >= 65 )        
  52   1          {
  53   2              a = a - 'A' + 10;
  54   2          }
  55   1          else
  56   1          {
  57   2              a = a - '0';    
  58   2          }
  59   1          
  60   1          if ( b >= 65 )        
  61   1          {
  62   2              b = b - 'A' + 10;
  63   2          }
  64   1          else
  65   1          {
  66   2              b = b - '0';    
  67   2          }
  68   1              
  69   1          return (16 * a) + b;
  70   1      }
  71          
  72          void TwoByteToAscii(uint16_t val)
  73          {
  74   1          int i = 0;
  75   1      
  76   1          for ( i = 0; i < 4; i++ )
  77   1          {
  78   2              hexa[i] = 0;
  79   2          }
  80   1          
  81   1          i = 0;
  82   1          while ( val > 0)
  83   1          {
  84   2              hexa[i] = val % 16;
  85   2              val /= 16;    
  86   2              i++; 
  87   2          }        
  88   1          
  89   1          for ( i = 0; i < 4; i++ )
  90   1          {
  91   2              ascii[i] = NibbleToAscii(hexa[i]);
  92   2          }
  93   1          
  94   1          return ;
  95   1      }
  96          
  97          uint16_t AsciiToTwoByte(void)
  98          {
  99   1          uint16_t a = AsciiToByte(ascii[0], ascii[1]);
 100   1          uint16_t b = AsciiToByte(ascii[2], ascii[3]);
 101   1      
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 12  

 102   1          uint16_t result = ( a * 256 ) + b;
 103   1      
 104   1          return result;
 105   1      }
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _ByteToAscii (BEGIN)
                                           ; SOURCE LINE # 12
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 13
                                           ; SOURCE LINE # 14
0000 EF                MOV     A,R7
0001 C4                SWAP    A
0002 540F              ANL     A,#0FH
0004 FE                MOV     R6,A
;---- Variable 'a' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 15
0005 EF                MOV     A,R7
0006 540F              ANL     A,#0FH
0008 FF                MOV     R7,A
;---- Variable 'b' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 17
0009 EE                MOV     A,R6
000A D3                SETB    C
000B 9409              SUBB    A,#09H
000D 7480              MOV     A,#080H
000F 9480              SUBB    A,#080H
0011 EE                MOV     A,R6
0012 5006              JNC     ?C0001
                                           ; SOURCE LINE # 18
                                           ; SOURCE LINE # 19
0014 2430              ADD     A,#030H
0016 F500        R     MOV     ascii,A
                                           ; SOURCE LINE # 20
0018 8004              SJMP    ?C0002
001A         ?C0001:
                                           ; SOURCE LINE # 22
                                           ; SOURCE LINE # 23
001A 2437              ADD     A,#037H
001C F500        R     MOV     ascii,A
                                           ; SOURCE LINE # 24
001E         ?C0002:
                                           ; SOURCE LINE # 26
001E EF                MOV     A,R7
001F D3                SETB    C
0020 9409              SUBB    A,#09H
0022 7480              MOV     A,#080H
0024 9480              SUBB    A,#080H
0026 EF                MOV     A,R7
0027 5005              JNC     ?C0003
                                           ; SOURCE LINE # 27
                                           ; SOURCE LINE # 28
0029 2430              ADD     A,#030H
002B F500        R     MOV     ascii+01H,A
                                           ; SOURCE LINE # 29
002D 22                RET     
002E         ?C0003:
                                           ; SOURCE LINE # 31
                                           ; SOURCE LINE # 32
002E 2437              ADD     A,#037H
0030 F500        R     MOV     ascii+01H,A
                                           ; SOURCE LINE # 33
                                           ; SOURCE LINE # 35
0032         ?C0005:
0032 22                RET     
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 14  

             ; FUNCTION _ByteToAscii (END)

             ; FUNCTION _NibbleToAscii (BEGIN)
                                           ; SOURCE LINE # 37
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
0000 EF                MOV     A,R7
0001 D3                SETB    C
0002 9409              SUBB    A,#09H
0004 7480              MOV     A,#080H
0006 9480              SUBB    A,#080H
0008 EF                MOV     A,R7
0009 5004              JNC     ?C0006
                                           ; SOURCE LINE # 40
                                           ; SOURCE LINE # 41
000B 2430              ADD     A,#030H
000D FF                MOV     R7,A
000E 22                RET     
                                           ; SOURCE LINE # 42
000F         ?C0006:
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
000F 2437              ADD     A,#037H
0011 FF                MOV     R7,A
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0012         ?C0007:
0012 22                RET     
             ; FUNCTION _NibbleToAscii (END)

             ; FUNCTION _AsciiToByte (BEGIN)
                                           ; SOURCE LINE # 49
;---- Variable 'b' assigned to Register 'R5' ----
;---- Variable 'a' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 50
                                           ; SOURCE LINE # 51
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9441              SUBB    A,#041H
0004 7480              MOV     A,#080H
0006 9480              SUBB    A,#080H
0008 4006              JC      ?C0009
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
000A EF                MOV     A,R7
000B 24C9              ADD     A,#0C9H
000D FF                MOV     R7,A
                                           ; SOURCE LINE # 54
000E 8004              SJMP    ?C0010
0010         ?C0009:
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
0010 74D0              MOV     A,#0D0H
0012 2F                ADD     A,R7
0013 FF                MOV     R7,A
                                           ; SOURCE LINE # 58
0014         ?C0010:
                                           ; SOURCE LINE # 60
0014 ED                MOV     A,R5
0015 C3                CLR     C
0016 9441              SUBB    A,#041H
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 15  

0018 7480              MOV     A,#080H
001A 9480              SUBB    A,#080H
001C 4006              JC      ?C0011
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
001E ED                MOV     A,R5
001F 24C9              ADD     A,#0C9H
0021 FD                MOV     R5,A
                                           ; SOURCE LINE # 63
0022 8004              SJMP    ?C0012
0024         ?C0011:
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
0024 74D0              MOV     A,#0D0H
0026 2D                ADD     A,R5
0027 FD                MOV     R5,A
                                           ; SOURCE LINE # 67
0028         ?C0012:
                                           ; SOURCE LINE # 69
0028 EF                MOV     A,R7
0029 C4                SWAP    A
002A 54F0              ANL     A,#0F0H
002C 2D                ADD     A,R5
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 70
002E 22                RET     
             ; FUNCTION _AsciiToByte (END)

             ; FUNCTION _TwoByteToAscii (BEGIN)
                                           ; SOURCE LINE # 72
;---- Variable 'val' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
;---- Variable 'i' assigned to Register 'R4/R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
                                           ; SOURCE LINE # 76
0002         ?C0014:
                                           ; SOURCE LINE # 77
                                           ; SOURCE LINE # 78
0002 7C04              MOV     R4,#04H
0004 7800        R     MOV     R0,#LOW hexa
0006 E4                CLR     A
0007         ?C0024:
0007 F6                MOV     @R0,A
0008 08                INC     R0
0009 DCFC              DJNZ    R4,?C0024
                                           ; SOURCE LINE # 79
000B         ?C0015:
                                           ; SOURCE LINE # 81
000B E4                CLR     A
000C FC                MOV     R4,A
000D FD                MOV     R5,A
000E         ?C0017:
                                           ; SOURCE LINE # 82
000E D3                SETB    C
000F EF                MOV     A,R7
0010 9400              SUBB    A,#00H
0012 EE                MOV     A,R6
0013 9400              SUBB    A,#00H
0015 401F              JC      ?C0018
                                           ; SOURCE LINE # 83
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 16  

                                           ; SOURCE LINE # 84
0017 EF                MOV     A,R7
0018 540F              ANL     A,#0FH
001A FB                MOV     R3,A
001B 7400        R     MOV     A,#LOW hexa
001D 2D                ADD     A,R5
001E F8                MOV     R0,A
001F A603              MOV     @R0,AR3
                                           ; SOURCE LINE # 85
0021 EE                MOV     A,R6
0022 C4                SWAP    A
0023 F8                MOV     R0,A
0024 54F0              ANL     A,#0F0H
0026 C8                XCH     A,R0
0027 68                XRL     A,R0
0028 FE                MOV     R6,A
0029 EF                MOV     A,R7
002A C4                SWAP    A
002B 540F              ANL     A,#0FH
002D 48                ORL     A,R0
002E FF                MOV     R7,A
                                           ; SOURCE LINE # 86
002F 0D                INC     R5
0030 BD0001            CJNE    R5,#00H,?C0025
0033 0C                INC     R4
0034         ?C0025:
                                           ; SOURCE LINE # 87
0034 80D8              SJMP    ?C0017
0036         ?C0018:
                                           ; SOURCE LINE # 89
0036 E4                CLR     A
0037 FC                MOV     R4,A
0038 FD                MOV     R5,A
0039         ?C0019:
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
0039 7400        R     MOV     A,#LOW hexa
003B 2D                ADD     A,R5
003C F8                MOV     R0,A
003D E6                MOV     A,@R0
003E FF                MOV     R7,A
003F 120000      R     LCALL   _NibbleToAscii
0042 7400        R     MOV     A,#LOW ascii
0044 2D                ADD     A,R5
0045 F8                MOV     R0,A
0046 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 92
0048 0D                INC     R5
0049 BD0001            CJNE    R5,#00H,?C0026
004C 0C                INC     R4
004D         ?C0026:
004D ED                MOV     A,R5
004E 6404              XRL     A,#04H
0050 4C                ORL     A,R4
0051 70E6              JNZ     ?C0019
                                           ; SOURCE LINE # 95
0053         ?C0022:
0053 22                RET     
             ; FUNCTION _TwoByteToAscii (END)

             ; FUNCTION AsciiToTwoByte (BEGIN)
                                           ; SOURCE LINE # 97
C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 17  

                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0000 AD00        R     MOV     R5,ascii+01H
0002 AF00        R     MOV     R7,ascii
0004 120000      R     LCALL   _AsciiToByte
;---- Variable 'a' assigned to Register 'R2/R3' ----
0007 AB07              MOV     R3,AR7
0009 7A00              MOV     R2,#00H
                                           ; SOURCE LINE # 100
000B AD00        R     MOV     R5,ascii+03H
000D AF00        R     MOV     R7,ascii+02H
000F 120000      R     LCALL   _AsciiToByte
;---- Variable 'b' assigned to Register 'R4/R5' ----
0012 AD07              MOV     R5,AR7
0014 7C00              MOV     R4,#00H
                                           ; SOURCE LINE # 102
0016 EB                MOV     A,R3
0017 FE                MOV     R6,A
0018 E4                CLR     A
0019 2D                ADD     A,R5
001A FF                MOV     R7,A
001B EC                MOV     A,R4
001C 3E                ADDC    A,R6
001D FE                MOV     R6,A
;---- Variable 'result' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
001E 22                RET     
             ; FUNCTION AsciiToTwoByte (END)

C51 COMPILER V9.60.0.0   ASCII                                                             10/13/2022 12:12:50 PAGE 18  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


uint16_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
_NibbleToAscii . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
AsciiToTwoByte . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  a. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
  b. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
  result . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
_TwoByteToAscii. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   INT      0004H  2
int_least32_t. . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int_least16_t. . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
int32_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int16_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
ascii. . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0000H  4
uint_fast32_t. . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint_fast16_t. . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
int_fast32_t . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int_fast16_t . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
hexa . . . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0004H  4
_AsciiToByte . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  a. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  b. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_ByteToAscii . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  a. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  b. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
uint_least8_t. . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
uint8_t. . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
int_least8_t . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
int8_t . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
uintmax_t. . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint_fast8_t . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
intmax_t . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
int_fast8_t. . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
uintptr_t. . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
intptr_t . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
uint_least32_t . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
uint_least16_t . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
uint32_t . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    232    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
